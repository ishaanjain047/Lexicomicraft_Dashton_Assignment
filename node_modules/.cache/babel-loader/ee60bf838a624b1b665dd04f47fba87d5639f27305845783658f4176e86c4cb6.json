{"ast":null,"code":"var _jsxFileName = \"/Users/ishaanjain/Desktop/Dashtoon-error/Lexicomicraft_Dashton_Assignment/src/components/Generator/PanelGenerator/index.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport PanelInput from '../PanelInput';\nimport \"./index.css\";\nimport { useNavigate } from 'react-router-dom';\nimport { v4 as uuid } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PanelGenerator = ({\n  panels,\n  setPanels\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const generateComic = () => {\n    let cnt = 0;\n    console.log(\"panels is \", panels);\n    panels.map(panel => {\n      if (panel.imgsrc !== null && panel.imgsrc !== undefined && panel.imgsrc !== \"\") {\n        cnt++;\n      }\n    });\n    console.log(\"cnt is \", cnt);\n    if (cnt < 10) {\n      alert(\"Atleast 10 panels should be created\");\n      return;\n    }\n    navigate(\"/comic\");\n  };\n  const generate = async (textval, id) => {\n    if (textval === \"\") {\n      alert(\"Input is empty\");\n      return;\n    }\n    const obj = {\n      inputs: `${textval}`\n    };\n    setPanels(current => current.map(panel => {\n      if (panel.id === id) {\n        return {\n          ...panel,\n          desc: textval,\n          loading: true\n        };\n      }\n      return panel;\n    }));\n    try {} catch (error) {}\n    // const response = await fetch(\n    //   \"https://xdwvg9no7pefghrn.us-east-1.aws.endpoints.huggingface.cloud\",\n    //   {\n    //     headers: {\n    //       Accept: \"image/png\",\n    //       Authorization:\n    //         \"Bearer VknySbLLTUjbxXAXCjyfaFIPwUTCeRXbFSOjwRiCxsxFyhbnGjSFalPKrpvvDAaPVzWEevPljilLVDBiTzfIbWFdxOkYJxnOPoHhkkVGzAknaOulWggusSFewzpqsNWM\",\n    //       \"Content-Type\": \"application/json\",\n    //     },\n    //     method: \"POST\",\n    //     body: JSON.stringify(obj),\n    //   }\n    // );\n    // const result = await response.blob();\n    // let url = URL.createObjectURL(result);\n\n    // setPanels((current) =>\n    //   current.map((panel) => {\n    //     if (panel.id === id) {\n    //       return { ...panel, desc: textval, imgsrc: url, loading: false };\n    //     }\n    //     return panel;\n    //   })\n    // );\n  };\n\n  const deletePanel = panelId => {\n    setPanels(prevPanels => prevPanels.filter(panel => panel.id !== panelId));\n  };\n  const handleTextChange = (e, panelId) => {\n    const updatedPanels = panels.map(panel => {\n      if (panel.id === panelId) {\n        return {\n          ...panel,\n          desc: e.target.value\n        };\n      }\n      return panel;\n    });\n    setPanels(updatedPanels);\n  };\n  const addPanel = () => {\n    setPanels(s => {\n      const unique_id = uuid();\n      const newObj = {\n        id: unique_id,\n        desc: \"\",\n        imgsrc: \"\",\n        loading: false\n      };\n      return [...s, newObj];\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panelGeneratorWrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panelInputs\",\n      children: panels.map((item, key) => {\n        console.log(\"item is \", item);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"addedPanel\",\n          children: /*#__PURE__*/_jsxDEV(PanelInput, {\n            loading: item.loading,\n            desc: item.desc,\n            imagesrc: item.imgsrc,\n            handleTextChange: e => handleTextChange(e, item.id),\n            generate: () => generate(item.desc, item.id),\n            deletePanel: () => deletePanel(item.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this)\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"addAndSubmit\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"addMoreBtnCon\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"addMoreBtn Btn\",\n          onClick: addPanel,\n          children: \"Add More Panels\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"submitButton\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"finalGenerateBtn Btn\",\n          onClick: generateComic,\n          children: \"Generate Comic !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(PanelGenerator, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = PanelGenerator;\nexport default PanelGenerator;\nvar _c;\n$RefreshReg$(_c, \"PanelGenerator\");","map":{"version":3,"names":["React","PanelInput","useNavigate","v4","uuid","jsxDEV","_jsxDEV","PanelGenerator","panels","setPanels","_s","navigate","generateComic","cnt","console","log","map","panel","imgsrc","undefined","alert","generate","textval","id","obj","inputs","current","desc","loading","error","deletePanel","panelId","prevPanels","filter","handleTextChange","e","updatedPanels","target","value","addPanel","s","unique_id","newObj","className","children","item","key","imagesrc","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/ishaanjain/Desktop/Dashtoon-error/Lexicomicraft_Dashton_Assignment/src/components/Generator/PanelGenerator/index.js"],"sourcesContent":["import React from 'react'\nimport PanelInput from '../PanelInput';\nimport \"./index.css\";\nimport { useNavigate } from 'react-router-dom';\nimport { v4 as uuid } from \"uuid\";\nconst PanelGenerator = ({\n  panels,\n  setPanels,\n}) => {\n  const navigate = useNavigate();\n  const generateComic = () => {\n    let cnt = 0;\n    console.log(\"panels is \", panels);\n    panels.map((panel) => {\n      if (\n        panel.imgsrc !== null &&\n        panel.imgsrc !== undefined &&\n        panel.imgsrc !== \"\"\n      ) {\n        cnt++;\n      }\n    });\n    console.log(\"cnt is \", cnt);\n    if (cnt < 10) {\n      alert(\"Atleast 10 panels should be created\");\n      return;\n    }\n    navigate(\"/comic\");\n  };\n\n  const generate = async (textval, id) => {\n    if(textval===\"\"){\n      alert(\"Input is empty\");\n      return;\n    }\n    const obj = { inputs: `${textval}` };\n       setPanels((current) =>\n         current.map((panel) => {\n           if (panel.id === id) {\n             return { ...panel, desc: textval, loading: true };\n           }\n           return panel;\n         })\n       );\n    try{\n\n    }\n    catch(error){\n\n    }\n    // const response = await fetch(\n    //   \"https://xdwvg9no7pefghrn.us-east-1.aws.endpoints.huggingface.cloud\",\n    //   {\n    //     headers: {\n    //       Accept: \"image/png\",\n    //       Authorization:\n    //         \"Bearer VknySbLLTUjbxXAXCjyfaFIPwUTCeRXbFSOjwRiCxsxFyhbnGjSFalPKrpvvDAaPVzWEevPljilLVDBiTzfIbWFdxOkYJxnOPoHhkkVGzAknaOulWggusSFewzpqsNWM\",\n    //       \"Content-Type\": \"application/json\",\n    //     },\n    //     method: \"POST\",\n    //     body: JSON.stringify(obj),\n    //   }\n    // );\n    // const result = await response.blob();\n    // let url = URL.createObjectURL(result);\n\n    // setPanels((current) =>\n    //   current.map((panel) => {\n    //     if (panel.id === id) {\n    //       return { ...panel, desc: textval, imgsrc: url, loading: false };\n    //     }\n    //     return panel;\n    //   })\n    // );\n  };\n\n  const deletePanel = (panelId) => {\n    setPanels((prevPanels) =>\n      prevPanels.filter((panel) => panel.id !== panelId)\n    );\n  };\n\n   const handleTextChange = (e, panelId) => {\n     const updatedPanels = panels.map((panel) => {\n       if (panel.id === panelId) {\n         return { ...panel, desc: e.target.value };\n       }\n       return panel;\n     });\n\n     setPanels(updatedPanels);\n   };\n\n  const addPanel = () => {\n    setPanels((s) => {\n      const unique_id = uuid();\n      const newObj = {\n        id: unique_id,\n        desc: \"\",\n        imgsrc: \"\",\n        loading:false\n      };\n      return [...s, newObj];\n    });\n  };\n  return (\n    <div className=\"panelGeneratorWrapper\">\n      <div className=\"panelInputs\">\n        {panels.map((item, key) => {\n          console.log(\"item is \", item);\n          return (\n            <div className=\"addedPanel\" key={key}>\n              <PanelInput\n                loading={item.loading}\n                desc={item.desc}\n                imagesrc={item.imgsrc}\n                handleTextChange={(e) => handleTextChange(e, item.id)}\n                generate={() => generate(item.desc, item.id)}\n                deletePanel={() => deletePanel(item.id)}\n              ></PanelInput>\n            </div>\n          );\n        })}\n      </div>\n      <div className=\"addAndSubmit\">\n        <div className=\"addMoreBtnCon\">\n          <button className=\"addMoreBtn Btn\" onClick={addPanel}>\n            Add More Panels\n          </button>\n        </div>\n        <div className=\"submitButton\">\n          <button className=\"finalGenerateBtn Btn\" onClick={generateComic}>\n            Generate Comic !\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PanelGenerator"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}